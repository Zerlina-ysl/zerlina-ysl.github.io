<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ᕕ( ᐛ )ᕗ xiaoli's blog</title><link>https://zerlina-ysl.github.io/</link><description>Recent content on ᕕ( ᐛ )ᕗ xiaoli's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 27 Nov 2023 23:54:28 +0800</lastBuildDate><atom:link href="https://zerlina-ysl.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>记录mit6.824-lab1</title><link>https://zerlina-ysl.github.io/blog/6.824_lab1/</link><pubDate>Mon, 27 Nov 2023 23:54:28 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/6.824_lab1/</guid><description>环境准备 https://pdos.csail.mit.edu/6.824/notes/l01.txt
http://nil.csail.mit.edu/6.824/2022/labs/lab-mr.html
Go version:http://nil.csail.mit.edu/6.824/2022/labs/go.html
本质 建议把示例中的调用逻辑整理清晰，并把相关的描述文档多看几遍。
lab1本质上由单worker单coordinator变成三个worker单coodinator，处理好并发安全就可以。
go语言处理并发安全无非那老一套：使用channel通信；加锁。
流程图 使用飞书画的，好可爱!!!
脚本测试过程 // 构建插件 go build -race -buildmode=plugin ../mrapps/wc.go rm mr-out* // 每个文件就是map的输入 go run -race mrcoordinator.go pg-*.txt go build -race -buildmode=plugin ../mrapps/wc.go go run -race mrworker.go wc.so cat mr-out-* | sort | more -------- // 也可以直接运行： bash test-mr.sh 测试共包含8个，全部PASS算通过；建议将不通过的脚本单独复制出来测试。
代码 https://github.com/Zerlina-ysl/6.824
参考 https://blog.csdn.net/weixin_45938441/article/details/124018485</description></item><item><title>Hello-world!</title><link>https://zerlina-ysl.github.io/diary/hello-world/</link><pubDate>Sun, 26 Nov 2023 23:46:13 +0800</pubDate><guid>https://zerlina-ysl.github.io/diary/hello-world/</guid><description>好吧，又换了个主题，花费一些时间将之前的文章全部迁移过来啦，还是简单的风格最耐看。捣鼓捣鼓打算延续写博客的习惯。哪怕三分钟热度，希望这次可以坚持的久一些&amp;hellip;
分为两个模块，技术和日记。
技术还是工作的时候遇到的一些想学的、好玩的、没听过的。
日记就是写一些感触吧。
[] 实现most recent blogs.类似于https://herman.bearblog.dev/ hugo-bearblog和bearblog是两个项目；可以考虑自己实现这个功能，并提一个pr。
[] 实现字数统计
[] 新博客的第二篇文章: go语言指针和浅拷贝
[] GitHub Action自动发布
[] 支持点击查看图片
更新记录 格式： YYYY-MM-DD [add/fix/remove]function:description
2023-11-27 [add] 使用utterances实现博客评论功能
2023-11-28 [add] 使用github actions实现博客自动部署。</description></item><item><title>浅浅学习分布式算法</title><link>https://zerlina-ysl.github.io/blog/distrubute_algorithms/</link><pubDate>Mon, 06 Mar 2023 16:18:03 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/distrubute_algorithms/</guid><description>Paxos Paxos是一个共识(consensus)算法，共识算法解决的是分布式系统对某个提案（Proposal），大部分节点达成一致意见的过程。 保证最终只有一个提案会被选定，提案被选定后进程也可以获取到被选定的提案。
前提 假设不同参与者可以通过发送消息来通信，并使用普通的非拜占庭模式的异步模型，即每个参与者以任意速度执行，可能会出错而停止，也可能会重启,消息在传输中可能会花费任意的时间，可能会重复、丢失，但不会被损坏，即其内容不会被篡改，不会发生拜占庭式问题。
拜占庭将军问题：某国有许多军队，军队的将军需要制定一个统一的行动计划&amp;mdash;进攻或撤退。将军们地理位置是分开的，只能靠通讯员通信，将军中存在叛徒，叛徒可以篡改消息，欺骗将军。~~理论研究显示，在3n+1的系统中，只有叛徒数目小于等于n，才有可能设计一个协议使得叛徒无论怎样作梗也能达成一致。~~即分布式计算中系统中的成员计算机可能出错而发送错误的信息，用于传递信息的通讯网络也可能导致信息损坏，使得网络中不同的成员关于全体协作的策略得出不同结论，从而破坏系统一致性
Paxos算法假设所有信息都是完整的，没有被篡改和伪造。
主要术语 Proposer：提案者
Proposal：提案，由Proposer提出，一个提案由一个编号及value形成的对组成，编号是为了防止混淆，保证提案的可区分性，value代表提案本身的内容。提案的含义在分布式系统中十分宽泛，如多个事件发生的顺序、某个键对应的值、谁是主节点……等等。可以认为任何可以达成一致的信息都是一个提案。
Acceptor：提案的受理者，被动接受来自Proposer的提议，有权决定是否接受该提案。
Choose：被选定的提案，当有半数以上Acceptor接受该提案，就认为提案被选定。
Learner：被动接受来自Acceptor的消息，需要知道被选定的提案信息。
假设有一组可以提出提案的进程集合，一个一致性算法需要保证以下三点：
被提出的提案只有一个会被选定
如果没有提案被提出，就不会有被选定的提案。
当一个提案被选定后，进程可以获取被选定的提案信息。
安全性原则 安全性是指那些需要保证永远都不会发生的事情，
只有被提出的提案可以被选定
只能有一个value被选定
如果某个进程认为某个提案被选定了，那么这个提案必须是真的被选定那个。
存活原则 存活是指那些最终一定会发生的事情
最终会批准某个提案的value
一个value被批准了，其他服务器最终会学习到这个value
Basic Paxos Paxos一致性算法分为两阶段提交：prepare阶段和Acceptor阶段
Prepare阶段 阶段 a：proposer选择一个提案编号n，并将携带编号n的prepare请求发送给大多数的Acceptor。
阶段b：Acceptor收到Prepare消息后，如果提案编号大于它已经回复的所有prepare消息，Acceptor回复给Proposer一个promise消息，承诺不再接受小于n的提案。promise携带acceptor接受过的最大的编号。
Acceptor阶段 阶段a: 如果proposer从大多数acceptor中接收到对prepare请求的回复，它将向这些acceptors发送一个编号为n，value为v的accept请求，v是这些回复中最高编号的提案，或者响应报告中没有提案，v是任意值。
阶段b: 如果一个acceptor收到了编号为n的acceptor请求，它会接受该提案。除非已经回复过编号大于n的prepare请求。
示例 P2分别向A2 A3发送序号为2的prepare请求，A2 A3之前没有接受过序号更大的prepare消息，因此会向P2返回一个序号为2的promise请求。
P1分别向A1 A2发送序号为1的prepare请求,A1之前没有接受过序号更大的prepare消息，因此会向P1返回一个序号为1的promise请求。而A2已经接受过序号为2的，因此会忽略P1的prepare请求。
P1为了将提案达成共识，会发送一个Acceptor请求，携带编号和value。
P2为了将提案达成共识，会发生Acceptor请求，携带编号和value。
A1会将共识发送给L1，并回复P1。
A2 A3 会将共识发送给L1，并回复P2。
活锁问题 P1提交的Proposal被拒绝时，可能存在因为Acceptor承诺返回了更大编号的Proposal，P1提高Proposal编号继续提交。一旦出现这种情况，两个Proposer都发现自己的编号过低转而提出更高编号的Proposal，这会导致死循环，该现象被称为活锁。你编号高，我再比你更高，反复如此，算法永远无法结束。
对于Basic Paxos来说，具有活锁问题，每次只能对单个提案形成决议，而决议的形成至少需要两次网络请求和应答，如果每个命令都需要通过Basic Paxos算法达到一致，会产生大量开销。 Basic Paxos的价值在于开拓了分布式共识算法的发展思路，但无法直接用于实践，只能作为学术研究。但是正如Mike Burrows所说，”There is only one consensus protocol, and that&amp;rsquo;s “Paxos” — all other approaches a re just broken versions of Paxos“，许多实际应用的分布式算法如Raft、ZAB等都是基于Basic Paxos的改进。</description></item><item><title>云原生之k8s入门</title><link>https://zerlina-ysl.github.io/blog/devops_k8s/</link><pubDate>Wed, 22 Feb 2023 20:16:40 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/devops_k8s/</guid><description>在学习docker的时候我们说到，docker的使用标志着进入容器化时代，但随之也产生了许多问题：
如何协调和调度这些容器？ 如何保证升级应用时不会中断服务的提供？ 如何监控容器的运行状况？ 如何批量操作容器中的应用？ &amp;hellip;&amp;hellip; 解决这些问题所需要的就是容器编排技术，k8s是当前流行的大规模容器编排系统。
服务发现和负载均衡。使用DNS名称或ip地址公开容器，k8s可以负载均衡并分配网络流量。 存储编排。允许自动挂载所选择的存储系统，如本地存储、公共云提供商等。 自动部署和回滚。可以自动化k8s创建新容、删除现有容器并将资源用于新容器 自动装箱计算。k8s可以管理容器所需的cpu和内存(RAM) 自我修复。 密钥和配置管理。k8s允许存储和管理敏感信息，可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，无需在堆栈配置中暴露密钥。 k8s提供了弹性运行分布式系统框架，满足扩展要求、故障转移、部署模式等。 架构 https://kubernetes.io/docs/concepts/overview/components/ 集群部署 k8s的集群创建需要最少三台机器，我在阿里云购买了三台centos服务器，对于服务器有以下要求。
2cpu或更多 2GB或更多RAM 机器间可以互相通信、不能有重复的主机名、mac地址 禁用交换分区 对于三台服务器，创建了网段为171.31.0.0/16的专用网络，和网段为171.31.0.0/24的交换机，并让三台服务器位于该专用网络和交换机下。
以下命令默认在所有机器中都要执行
1. 安装kubeadm 配置基础环境 #各个机器设置自己的域名 hostnamectl set-hostname xxxx # 刷新，显示主机名 bash # 将 SELinux 设置为 permissive 模式（相当于将其禁用） sudo setenforce 0 sudo sed -i &amp;#39;s/^SELINUX=enforcing$/SELINUX=permissive/&amp;#39; /etc/selinux/config #关闭swap swapoff -a sed -ri &amp;#39;s/.*swap.*/#&amp;amp;/&amp;#39; /etc/fstab #允许 iptables 检查桥接流量 cat &amp;lt;&amp;lt;EOF | sudo tee /etc/modules-load.d/k8s.conf br_netfilter EOF cat &amp;lt;&amp;lt;EOF | sudo tee /etc/sysctl.</description></item><item><title>2022，我这一年</title><link>https://zerlina-ysl.github.io/diary/my2022/</link><pubDate>Sun, 05 Feb 2023 23:07:02 +0800</pubDate><guid>https://zerlina-ysl.github.io/diary/my2022/</guid><description>本该早都完成的年终总结，拖到了2023年的元宵。这个年过得还不错，看到了美丽的烟花，听到了鞭炮声。
一月，变幻莫测 我告别当时的对象，准备开启长达半年的异地生活。
同时，临近期末，我不得不将情绪从和对象分离难过和不习惯中抽出，去图书馆奋笔疾书补一补功课。令人意想不到的是，由于疫情原因，距离考试没几个小时，年级领导突然通知考试延期到下个学期。记得几天下了很大的雪，整个学校银装素裹，非常漂亮。不过我很后悔那天没有和室友一起打雪仗。
不过，既然考试延期了，收拾书包，背上就回了家享受自己的寒假生活。 二月，玩 疫情原因，和烟火爆竹的禁燃，这个年过的很快，就溜走了。下了几场雪，又看了几个日落，就入春了，开学了。和室友一起去吃了火锅，喝了酒，我玩的很浪荡又很开心，大家都喝的很醉，却又急忙赶着寝室关门的时间，偌大而安静的夜晚，我们一起在校园里奔跑，在校园里哭泣，在校园里发酒疯，觉得大学会一直这样持续下去，觉得人生其实也不过如此。 躁动的三月 三月就开始为实习投简历了，做了很多笔试，但都没什么结果。只记得刚开始几场笔试结果不太出彩，算法题写不出来，下来就开始哭。阿里的二面，面试官问了一些无意义的八股，又出了一道可以随意百度的题，我没写出来，面试结束后我的状态立即变成了不通过。所有的难过和痛苦全涌入我的脑海，在阳台上，和我妈妈打了一通电话，说我好像真的找不到工作，然后哭的抽抽。不过说实在的，当时还是觉得自己可以搏一搏。
面试的受挫和社交上的孤独，青春的躁动涌入我的生活，我变得孤独而害怕孤独，我很怕一个人。爱情和思念纠缠着每一个身在其中的人，我也是，我很痛苦，也找不到解决之道。
但是熬着熬着，就进入了四月。
四月，彩虹前夕 我的面试没有丝毫进展，而家昊已经拿了百度/keep/字节的offer，我变得焦虑，走极端。碰壁的我开始后悔自己为什么要放弃保研，为什么那么一意孤行。我发现原来并不是所有事情都如我心意，我的实力在面试官眼里不值一提，甚至机会也不愿意给予。我陷入四面八方的情绪漩涡，无法摆脱。
qxm和我聊了很多，告诉我并没有哪条路是正确或错误的，我不能一味的逃避、不思考。其实这些话现在看起来也很适用。
不过在月中的时候，对象从北京回来了。因为疫情政策，对象回来也只能在校外租房子，还怕被学校查到，不过因祸得福，虽然学校反复强调禁止外宿，但我硬着头皮陪她一起住外面，反而找到了一个适合面试的地方。
另一方面，我也加班加点准备准备面试，努力背八股，虽然机会不多，但都好好珍惜，其他时间都跑学校打乒乓球。在月末时，得到了字节的面试机会，虽然一面出了hard，但是也侥幸通过。
五月，我就是最屌的 五月，字节的offer审批了下来。当时的我像所有18、19岁的少年一样，目中无人，觉得全世界就在自己脚下，而自己就是世界的中心。我没有意识到任何的不妥，在学校玩了一个月。当时疫情封校，学校很热闹，无忧无虑，非常开心，觉得人生也无忧，但没想到不过转瞬即逝。 六月，继续玩 对象毕业了，去对象家待了几天。他父母费了很大心思，带我去很远的地方吃饭，还请我去逛游乐园，我第一次直接的感受到，原来足够的消费可以带来足够的享受。但是毕竟人在屋檐下，呆了几天还是要回家。家里的条件和对象家里的直观对比，让我到家的第一天晚上心情很复杂。不过都一样，玩到了26号，我就跑到北京入职了，很期待，又很开心。 7-9月，孤独 实习的日子过的很快，刚开始未接触到实际研发，在新人大作业过家家，所以只觉得下班后很孤独很无聊。还有就是不能转正。但一切还好，觉得会慢慢变好。
后来开始接触需求，我代码能力一塌糊涂，不止在开发中，甚至在询问、落实、理解等各种简单能力上也一塌糊涂，挨了很多骂，但也没有哭，因为一天四百。
其他的就是一直不分配需求，而小组那好似高中时期的晨会更让我难以接受。不过在痛苦和焦虑中还是一点点熬到了国庆，我又可以回家了。
对了，我也和当时的对象提了分手。长期的内耗和争吵已经消磨了爱意，互相耽搁时间不如各自分道扬镳，那是我第一次主动别离，而也是我第一次意识到虽然孤独，但我一个人也可以。
10月，原来家如此温馨 赶上北京开大会，健康宝严查，恰好我也不想去北京，就在家呆了一个月。发现原来环境对人的情绪影响如此大，在家的每一天我都很开心。在没有需求的时候，我也可以抽身去面试，不过面试一直没有什么好结果。 阴天，面完深信服，电脑在播放“simon&amp;quot;,“该往哪里走？路还麻木地走”，不知不觉眼泪就淌下来了。
11月，有一个三花小公主 早晚都要去闯鬼门关，北京这个我曾经如此向往的地方，现在却变得难以接受，但总要回去，继续日复一日的焦虑和痛苦。在某天，或许是字节三面挂掉的那天，也或许只是平淡无奇的某一天，我觉得自己的情绪已经达到了极点，我开始自救，我尝试领养一只小猫咪，也幸运的领养了一只小猫咪。刚开始很难，我觉得它很像三号楼，但慢慢的，我们熟了，它很容易就会呼噜，开始粘人，开始陪着我。那段时间我很幸福，虽然实习仍然受挫、挨骂、没有需求，秋招也惨不忍睹，但每一分每一秒都因为猫猫的存在而变的有意义。
12月，字节再见 疫情突然很严重，全公司居家了，我也可以偷摸带薪面试，不过都是一些练手的小厂，好不容易有了百度的面试机会，但因为场景题难倒了我，所以也挂了。 leader通知12.31是我last day的日子，刚开始有点难以接受，但随之而来的是松了口气，终于结束了，可以回家了。然后有一天，可能是白纸运动的第二天，是清华学子抗议的第二天，是上海、成都甚至是北京抗议的第二天，管控悄无声息的放开了，疫情就这样结束了。我也阳了，但我觉得这件事很小，不值一提，只是一场高烧，只是社会和我都病了。
日子过着过着，就要离职了。离职那天一身轻松，收拾好所有的行囊，听着赵雷的再见北京，最后再看一眼，就和北京说了再见。和我的2022说了再见。
2022年，我没有停止阅读，也没有放弃音药，更没有停下对计算机科学这门庞杂和深奥的学科学习和探索的过程。尽管前路黑暗，尽管我不是优秀的那个，但长夜终明。我相信自己，并且一直相信。
&amp;ldquo;我宁愿痛苦，我不要麻木&amp;rdquo;。</description></item><item><title>2022-06-26-2022-12-31 实习日记</title><link>https://zerlina-ysl.github.io/diary/intern/</link><pubDate>Thu, 12 Jan 2023 23:24:47 +0800</pubDate><guid>https://zerlina-ysl.github.io/diary/intern/</guid><description>以下是实习时的碎碎念，包括知道自己不能转正的失望沮丧、在北京一个人的孤单难过和对未来的一些迷茫，现在读起来很幼稚，但是不舍得删，之前在飞书文档里记录着，现在转载到这里
关于面试10.28 遇到好的面试官/面试官问到好的问题，真的是感觉这几十分钟值得了，哪怕面试没过也值得了。好的问题就是思维的开阔，比如：微信抢红包案例，如果没有问到，我不会想着下来搜一搜，也不会想着了解一下，更不会坚定自己做一下秒杀的项目过一下场景。
当然，如果没有遇到好的面试官也无所谓，毕竟有问题就会有答案，有答案就会有思考，有思考促进下一个新问题，找到了新不足。
明天去接猫猫，买好了猫猫的所有东西，一个小橘子和长毛小三花，虽然小橘子很粘人，但是心里还是偏爱长毛三花，感觉有个猫猫陪伴真的会很不错吧，自己一个人呆着，没有奋斗的意义，给自己找不来意义，只有孤独、虚无、痛苦，我无法解脱，我只能在无意义的视频中麻痹自己。
关于提问11.1 是和前端沟通的时候偶然发现“提问”这个门道的，先附上聊天截图。
当时看到这么一段话，是没兴趣看下去的。就突然想起来自己刚实习的时候也是这样。大家都很忙，问问题讲话都要直接重点，而不是需要附带一大堆上下文，对于问题的主谓宾一定要讲清楚。
等对方对问题细致解释的时候，再根据对方的疑惑点进行解答。
其实还可以和我面试的时候联系在一起，记得深信服的老哥建议我面试的回答采用总分格式，先说重点，再详细解释。后来细细品味确实是有些道理的。
看看这个也不错：https://github.com/betaseeker/How-To-Ask-Questions
关于定坤所提到的api工程师11.4 具体内容是在这篇文章，之前看过很多遍了，常看常新 11.8 相信未来 这个世界会好吗？等通知吧。
三面挂了，面试官说的蛮真诚，主要原因还是因为自己不够优秀，只是大致符合要求而已，没有闪光点。3分的话，就是大白菜的水平。昨天晚上很崩溃，今天也是，以后也是。接受现实，相信未来。 那么该怎么做呢，在没有找到工作的这段日子？
算法题需要保证。2天1题。星期天一天2题。可以适当增加
业务能力需要有突出的地方，需要有闪光点。除了一些基础必备的八股，对于实习需求需要多上心。认真做，认真看，认真想，多总结，多反思，多思考。
具体表现在：分析文档和总结复盘文档。出现问题一定要复盘，分析原因，思考如何做得更好。少私聊，少看群消息，少摸鱼，多干活，兢兢业业。
在工作中，不能玻璃心，不要什么都说，只说好不说坏，想清楚再说，有疑惑立即问，自己的任务自己上心负责和测试。
将已有的需求研究熟练。比如完结需求（这是唯一一个可以讲的需求，需要搞清楚kafka到底起了什么作用。即，思考一下kafka
写完以上，发现自己已经做好了一直实习的打算，看来目前的计划还是需要长租起码到明年春招（5月前），这周需要挑一个时间和ld聊一聊，聊被劝退的可能性，没有写具体时间，是因为还没有战胜和ld聊天的恐惧，不知道如何开口，说些什么。 11.15 突然的郁闷 顺丰开了6500，数字马力开了9000，不尽如人意，都是劝退价。
今天下午的时候很郁闷，想做一个秒杀项目，却发现似乎无法吸引面试官注意，好像从最开始我的学历这一步就已经输了，我不知道怎么提高自己的代码能力，不知道怎么让面试官耳目一新，不知道怎么从基础良好跃步到进阶。
我翻遍了谷歌，翻遍了飞书文档，试图从那些算得上是很出色的程序员的日记中找出什么，却发现他们都在谈思想谈方向，但是没人告诉我现在应该怎么做。考研吗？我又回到了起点。
下午代码上线，我一直在揪着心，我怕出现error，我怕看见错误，那意味着我能力的低下，意味着我哪怕已经有四个月的实习经历还是要被同事摁着头p。只要写代码就会出现bug，是我对自己代码能力的不自信，是我在写代码的时候无法保证百分百正确。
元认知，是对自己的思考过程进行认知和理解，其实就是反思能力。
意识到自己在想什么，纠正不明智的想法。
想象一个灵魂伴侣，时刻从未来、过去、全局、底层 看待自己
可以通过注意 注意力 的方法来提高元认知能力。
对 模糊 零容忍
11.21 幸运时懂得感恩，苦涩时保持风度 “我不是一个合格的实习生”，所有朋友都没有反对，虽然我尽力在合格。
不要祈求从任何人身上得到安慰或劝诫，对方没必要去迎合你说一些让你开心的话。而真相也不藏在别人的嘴里，不用急着去狡辩什么，因为大家只看结果。
看不到未来，一手好牌被我自己打的稀烂，大概率还是回去考研。自己其实也不想继续实习，但是路该往哪走呢。回家了倒还好啦，还是去考研，好不甘心呐。
发现每次遇到挫折我都会这么想，不过还好有再站起来的勇气。
专注于自己的目标，不要受外界干扰。道理总是说出来轻而易举。
从未来回看今天，或许这是我迷茫未来最普通最平凡的一天。但我很狼狈。
确定了12.30 last day。不得不说大厂管理层的技术开发，说话也是滴水不漏。有些难受，又觉得是个解脱，在字节这五六个月我并不快乐，终于可以摆脱了。 我们常常把眼下的生活视为过渡，这些日子或忙碌或痛苦，我们把它视为从此岸通往彼岸的桥梁，但绝不是我们认可的生活本身，持着这样的心情，过去人生的每一段时光，我们并不真正身处于当下，而是生活在未来，我们觉得等到某个时间点，理想的生活就会开始，但正是因为这种轻视，我们少有真正快乐且充实的拥有过人生的黄金阶段，你要知道，人生的每一个阶段，都有相应的只多不少的问题需要解决，你要学会面对冲突和接受自己的无能为力，当未来成为现在你生活的内核，并没有什么不同，总有一些阻碍阻拦着我们，总有些事要先解决，有些工作要做完，我们总觉得只有把这些都完成了，我们的生活才会开始，直到最后我们终于明白，这些障碍正是我们的生活本身。
11.26 意识到没有复盘总结的习惯 起因是在看这个文档。发现从来没有问过自己，入职五个月了， 为什么现在还没办法扛起一个模块？
信任。
之前没有实习经历，因此刚来时没有把重点放在对部门业务和公司架构的熟悉上，而是放在了赶快提交一个代码上。**战术的勤奋掩盖了战略的懒惰。**导致在不熟悉业务逻辑、没有对影响考虑周到、甚至不知道怎么做的时候，就开始急于开发。出了很多问题，也问了很多弱智问题，完全是同事在带着开发，失去了最初的信任。
信任建立过程仍然在犯错。没办法保证错误的减少，在开发时没有细问自己为什么，因此还是会犯一些不熟悉自己写的代码、不知道怎么部署agw等的低级错误。
同时，也不信任自己。虽然给了我一个模块，但是我觉得自己不可以，内心还需要别人的帮扶。包括在真正实践的时候，很多东西我也没有考虑到，我甚至都没有想到。
那么，目前还有什么不足的地方呢？
技术的深度和宽度。不会想那么多，也不会想那么深。一方面是因为实践经验在这里，没有接触到足够的开发场景；另一方面是复盘的总结没有到位，遇到问题思考并不深入，没有真正把自己代入到代码的第一责任人，只想着能跑就行，没想着优雅，也没想着以后怎么办，会不会出事。复盘不频繁，文档不清晰，也没有后续常看的习惯。
12.5 懒惰 居家三周后，我的习惯越来越差。无法集中思维，忍不住刷抖音，度过一天无所得，甚至基本的开发任务也无法完成。专注几分钟就让自己沉醉在无营养的视频中。
还记得居家第一周的时候我可以自豪地说我从中午到晚上一直高效率工作，现在只想着躺，想着玩，玩又无法尽兴，担忧未来，焦虑现状。
自律性是一方面，另一方面又觉得太疲惫了，快过年却仍0offer，觉得没办法挣脱这泥沼，觉得就这样吧。
但又不甘心这样，否则不会痛苦的一句又一句。
想明白道理很简单，15s的抖音视频毫无营养，纯打发时间，纯解脱自己，无聊，可是好像沉醉在这之中才可以逃避现实。但现实又无法被逃避，自己也无法被解脱，对现状毫无影响，甚至更遭。</description></item><item><title>自动化流水线如何构建项目</title><link>https://zerlina-ysl.github.io/blog/how_bytecycle_run/</link><pubDate>Sat, 19 Nov 2022 23:15:09 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/how_bytecycle_run/</guid><description>自动化流水线如何构建项目并运行？
DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。
SourceControlManagement 代码发布管理平台 拉取源代码，运行指定的build脚本(如 sh build.sh），将打包后的output目录下的内容打包成tar包并上传，生成可以在线上运行的代码或资源。
CloudEngine云引擎 容器发布和管理平台，基于k8s。 到scm仓库拉取tar的压缩包，根据配置生成用于构建的dockerFile，构建docker镜像,挂在宿主机上，启动服务，为服务创建唯一标识（psm)进行后续的管理。部署时通过k8s调度到某个node的pod，下载服务镜像。
TCE将一些物理服务器资源合并成一个集群，再将集群拆分为更细粒度的计算资源，从而实现对计算资源更灵活的调度和分配。
集群中多实例部署，每个实例只需要负责一部分的请求流量。多实例也可以实现容灾和滚动升级。
可以通过实例 ip+port的方法访问所部署的服务，也可以使用psm，即每个实例启动，会向注册中心报告自己的psm和ip，这样下游服务就可以访问注册中心来获得对应psm的实例列表。
ApiManament 管理服务接口,集成了测试、抓包、mock测试等功能。
ApiGeteWay 以API为核心，提供流量调度、限流、降级、服务治理等全套解决方案能力的网关平台。 AGW将http协议转换为thrift协议，把http请求转换为kitex请求。所以也需要在idl文件中根据idl语法进行标注。
分布式AGW 网关以独立的进程部署在业务实例中，流量-&amp;gt;TLB-&amp;gt;业务集群，通过网关转发到业务实例。流量路径中少一跳，整体时延收益明显。同时，分布式网关以sidecar模式独立进程部署在业务实例中，业务PSM天然隔离，隔离性和稳定性更好。 分布式AGW不支持跨机房流量调度、分流能力，比较依赖tlb的分流能力；不支持请求合并。
中心化AGW 流量路径从TLB–&amp;gt;网关集群–&amp;gt;业务集群。优势在于AGW集群作为集中到网关节点，拥有灵活的流量调度能力，如集群分流、机房调度等。
网关逻辑的更改发布一旦有问题，会影响所有业务。
从网关能力演进的角度来看，分布式网关是未来的趋势。API Gateway Mesh逐渐成为主流。
LoadBalance 管理服务域名流量入口的七层负载均衡服务。
用户可以在TLB平台为自己的服务配置对外的域名从而完成流量接入。支持对域名进行匹配，如正则匹配、自定义匹配等，将访问域名的流量通过不同路由分发到对应的后端psm服务。
参考 相爱相杀：Servicemesh和API Gateway关系深度探讨：https://skyao.io/post/202004-servicemesh-and-api-gateway/
蚂蚁金服 API Gateway Mesh 思考与实践：https://www.infoq.cn/article/azCFGyTDGakZqaLEEDMN</description></item><item><title>浅谈微服务架构</title><link>https://zerlina-ysl.github.io/blog/microservice/</link><pubDate>Fri, 18 Nov 2022 23:06:45 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/microservice/</guid><description>是什么？ 微服务以专注于单一责任与功能的小型功能区块为基础，利用模块化组合出复杂的大型应用程序，各区块可以使用与语言无关的api相互通讯。 服务框架的构建是一个持续演进的过程。
单体架构 最初的服务，如实现一个小说app，我们会把所有的功能都实现在一个程序，将各种功能按照高内聚低耦合的理念划分成多个模块(书成模块、登陆模块、书架模块等等…)。一个服务就是一个应用。
随着访问量增多，服务器压力变大，为了支持业务发展，首先选择了最直接的方法—加机器。
因此需要负载均衡来支持流量增长。所有的请求需要通过一层负载均衡，再打到最终的服务上。
但随着业务的发展、产品的迭代，单体架构的缺陷愈发明显：
所有功能高度耦合，互相影响，难以管理，团队合作受限 部分的逻辑修改也需要对整体服务进行开发和测试，采用瀑布式开发模型，开发周期长迭代慢。且需要影响全部服务的重建和部署，成本高 一个小bug可能会导致整个系统的崩溃
因此，需要对单体架构进行解耦！ 面向服务 借助单体架构的功能划分，将单体架构划分为几个大的服务应用。 每个服务应用内部通过负载均衡横向扩展。 拆分后的每个服务应用创建自己的接口定义，以便被其他服务发现 服务之间的通讯类似于计租中的总线原理：通过一个独立的中间件提供消息通讯
以上是简易版企业服务总线的初步设计，系统的所有流量通过通信总线进行路由分发。但随着流量的激增，通信总线会出现问题，通信总线成为了整个系统的中心化节点和瓶颈，影响了系统的扩展性和稳定性。 SOA 去中心化。
对于通信总线分发流量而导致的问题，使用DNS+IP网络架构解决。
域名：为每个服务定义一个psm(product.subsystem.module)作为服务的域名 IP：服务实例其实就是一个机器终端，拥有自己的ip地址 根服务器： 维护psm-&amp;gt;ip的映射，实现服务发现 服务注册：每个服务实例在创建后不断的向注册中心上报自己的地址(psm-ip)和实例状态 服务治理：注册中心维护着每个服务对应的实例地址列表及其健康状态 服务发现：实例定时向注册中心获取要访问的服务的实例地址，访问时通过负载均衡选择其中一个p2p来访问，流量不经由注册中心转发。负载均衡通过服务本身来实现。 通信协议：服务提供IDL文件，通过统一的rpc进行通信。 引入gateway将外部流量转换为内部请求。注册中心可以多实例部署，集群内部使用分布式算法保证其最终一致性。可以对服务进行更细粒度的拆分。
一个注册中心所具有的基本功能： 注册服务实例信息；心跳机制；剔除失败的服务实例；查询服务实例信息。
如何注册和发现服务？ 在微服务架构下，主要有三种角色：服务提供者（RPC Server）、服务消费者（RPC Client）和服务注册中心（Registry）。
RPC Server 提供服务，在启动时，根据服务发布文件 server.xml 中的配置的信息，向 Registry 注册自身服务，并向 Registry 定期发送心跳汇报存活状态。
RPC Client 调用服务，在启动时，根据服务引用文件 client.xml 中配置的信息，向 Registry 订阅服务，把 Registry 返回的服务节点列表缓存在本地内存中，并与 RPC Sever 建立连接。
当 RPC Server 节点发生变更时，Registry 会同步变更，RPC Client 感知后会刷新本地内存中缓存的服务节点列表。
RPC Client 从本地缓存的服务节点列表中，基于负载均衡算法选择一台 RPC Sever 发起调用。</description></item><item><title>使用git rebase合并冲突</title><link>https://zerlina-ysl.github.io/blog/git_rebase/</link><pubDate>Tue, 15 Nov 2022 00:18:23 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/git_rebase/</guid><description>今天在公司使用git rebase master解冲突失败，同事悉心教我，下来再研究一下。
git rebase master 回退分支 这一步可以跳过，只是我错误rebase操作导致目前分支代码不正常，需要先回滚代码。
git log commit b77bd104afddea0cb0c861dd03ecd3350848xxxx (HEAD -&amp;gt; i18n_author_guide, origin/i18n_author_guide) Author: lishenyu &amp;lt;lishenyu@xx.com&amp;gt; Date: Mon Nov 14 20:16:42 2022 +0800 fix: rebase master commit 1afc280edcc522f1749112476a0406ba0683xxxx Author: zheng &amp;lt;zheng@xx.com&amp;gt; Date: Wed Nov 9 14:14:16 2022 +0800 fix: idl更新 可以看到，我需要通过logID回退到历史版本。
git reset --hard 1afc280edcc522f1749112476a0406ba0683xxxx HEAD is now at 1afc280 fix: idl更新 git reset实现回退操作。首先需要明确三个区域：工作区/ 暂存区/ Repository。
我们对工作区中的代码进行修改，使用git add .将修改的所有代码添加到暂存区，使用git push将暂存区中的代码提交到远程的Repository。
–hard 撤销工作区所有未提交修改，将暂存区和工作区都回到上一个版本，删除之前的提交信息 –soft 保留工作目录中的内容，把新内容放置在暂存区。 –mixed 所有修改放在工作目录 ⚠️：git reset后再次push会引发冲突，需要push -f 1.</description></item><item><title>Diary</title><link>https://zerlina-ysl.github.io/diary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zerlina-ysl.github.io/diary/</guid><description/></item></channel></rss>