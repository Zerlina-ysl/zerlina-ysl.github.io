<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on ᕕ( ᐛ )ᕗ xiaoli's blog</title><link>https://zerlina-ysl.github.io/tags/go/</link><description>Recent content in go on ᕕ( ᐛ )ᕗ xiaoli's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 10 Aug 2024 22:03:56 +0800</lastBuildDate><atom:link href="https://zerlina-ysl.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>go语言基础</title><link>https://zerlina-ysl.github.io/blog/go_base/</link><pubDate>Sat, 10 Aug 2024 22:03:56 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/go_base/</guid><description>1、gopath go1.15之前，使用绝对路径提供项目的工作目录
bin
存放编译生成的二进制文件。比如 执行命令 go install github.com/google/gops，bin目录会生成 gops 的二进制文件。 pkg
XX_amd64: 其中 XX 是目标操作系统，比如 mac 系统对应的是darwin_amd64, linux 系统对应的是 linux_amd64，存放的是.a结尾的文件。 $GOPATH/pkg/mod: 当开启go Modules 模式下，go get命令缓存下依赖包存放的位置 $GOPATH/pkg/sumdb: go get命令缓存下载的checksum数据存放的位置 GOPATH 模式下，我们需要将应用代码存放在固定的$GOPATH/src目录下，且如果执行go get使用第三方类库的时候会自动下载并安装到$GOPATH目录下。
使用问题 项目地址问题 需要将应用代码存放在固定的$GOPATH/src目录下;第三方套件go get后也需要放置在GOPATH/src的路径下才可以使用。
项目的Golang代码，和第三方的Golang文件混在一起, 项目文件管理麻烦
多个项目时设置多个gopath，不同的GoPath都需要下载依赖，那么磁盘中重复的依赖就会非常多，会占用大量的磁盘空间
2、GOMODULE 使用gomodule管理第三方依赖,将第三方库储存在本地的空间，给项目代码引用
通过GO111MODULE控制：
on/不会去GOPATH目录下查找依赖 auto/根据当前目录来决定是否启用modules功能 off go.mod记录依赖包，go.sum保证依赖版本不被篡改
3、基本命令 go.mod Go 命令行工具会自动处理 go.mod 中指定的模块版本。当源代码中 import 指向的模块不存在于 go.mod 文件中时，Go 命令行工具会自动搜索这个模块，并将最新版本（最后一个 tag 且非预发布的稳定版本）添加到 go.mod 文件中。
go.sum https://eddycjy.com/posts/go/go-moduels/2019-09-29-goproxy-cn/
详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改。
# Go modules 打包整个模块包文件 zip 后再进行 hash 值 icode.</description></item></channel></rss>