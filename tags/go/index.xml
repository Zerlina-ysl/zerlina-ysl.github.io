<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on ᕕ( ᐛ )ᕗ xiaoli's blog</title><link>https://zerlina-ysl.github.io/tags/go/</link><description>Recent content in go on ᕕ( ᐛ )ᕗ xiaoli's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Jan 2025 23:01:38 +0800</lastBuildDate><atom:link href="https://zerlina-ysl.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>【go】pdqsort</title><link>https://zerlina-ysl.github.io/blog/pdqsort/</link><pubDate>Wed, 29 Jan 2025 23:01:38 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/pdqsort/</guid><description>1.排序算法 语言 排序算法 python timsort &amp;mdash; &amp;mdash; go1.18 混合排序，主要是快速排序 &amp;mdash; &amp;mdash; rust pdqsort &amp;mdash; &amp;mdash; c++ intro sort 1. 插入排序 将元素不断插入已排序的序列中。即不断交换，直到找到第一个比其小的元素。 2. 堆排序 利用堆的性质,构造一个大顶堆,将最大元素交换到最后一个位置，调整整个堆，如此反复 3. 快速排序 递归，不断分割序列直到序列整体有序。选定一个pivot,使用pivot分割序列，分成元素比pivot大和元素比pivot小的两个序列。
当pivot为中点，快排表现最好；当pivot选择为最大/最小元素时，快排表现最差。 实际场景下，根据序列长度划分后进行benchmark(16/128/1024)
完全随机情况下，短序列时插入排序最快，中、长序列时快排最快，但堆排序和快排的区别不大 完全有序情况下，插入排序最快 任何情况下，堆排序的表现比较稳定 2. pattern-defeating-quicksort 该算法结合三种排序算法的优点：
短序列，使用插入排序 其他情况用快排保证整体性能 当快排表现不佳时，使用堆排序保证最坏情况下的时间复杂度 短序列的长度为多少？12-32，在go语言的实现版本中，将短序列的长度选定为12。 何时从快排切换到堆排序？最终pivot距离序列两端距离小于length/8判定为快排表现不佳，这种情况次数达到bits.Len(length)时，切换为堆排序。bits.Len(length)表达的是一种阈值。
1. 关键点 pivot的选择：需要平衡寻找pivot的成本和pivot带来的性能 首个元素 实现简单，但完全有序情况效果不好 中位数 需遍历数组，性能不好,当array 的长度太长的话，寻找真正的 median 是一个非常昂贵的操作，需要存储所有的 items 近似中位数，根据序列长度不同决定选择策略 短序列(&amp;lt;=8),选择固定元素 中序列(&amp;lt;=50),采样三个元素 长序列(&amp;gt;50),采样九个元素 pivot的采样方式可以让我们探知当前的序列状态 采样元素逆序&amp;ndash;&amp;gt;序列可能逆序&amp;ndash;&amp;gt;翻转序列 采样元素顺序&amp;ndash;&amp;gt;序列可能顺序&amp;ndash;&amp;gt;使用插入排序，有限制次数的插入排序 优化重复度较高的情况 如果两次partition生成的pivot相同，即partition进行了无效分割，此时任务pivot的值为重复元素，limit-1，随机交换元素 2. 函数解析 1. choosePivot：选择pivot 支持三种选择方法：静态选择、三数取中、Tukey&amp;rsquo;s ninther
当数组长度大于等于 8 时，选择1/4、2/4、3/4处，在这三个位置中再找一个中位数作为最终的枢轴 如果长度大于等于 50 时，选择1/4、2/4、3/4处及其每处的相邻元素(共9个元素)的中位数作为最终的枢轴</description></item><item><title>go语言基础</title><link>https://zerlina-ysl.github.io/blog/go_base/</link><pubDate>Sat, 10 Aug 2024 22:03:56 +0800</pubDate><guid>https://zerlina-ysl.github.io/blog/go_base/</guid><description>1、gopath go1.15之前，使用绝对路径提供项目的工作目录
bin
存放编译生成的二进制文件。比如 执行命令 go install github.com/google/gops，bin目录会生成 gops 的二进制文件。 pkg
XX_amd64: 其中 XX 是目标操作系统，比如 mac 系统对应的是darwin_amd64, linux 系统对应的是 linux_amd64，存放的是.a结尾的文件。 $GOPATH/pkg/mod: 当开启go Modules 模式下，go get命令缓存下依赖包存放的位置 $GOPATH/pkg/sumdb: go get命令缓存下载的checksum数据存放的位置 GOPATH 模式下，我们需要将应用代码存放在固定的$GOPATH/src目录下，且如果执行go get使用第三方类库的时候会自动下载并安装到$GOPATH目录下。
使用问题 项目地址问题 需要将应用代码存放在固定的$GOPATH/src目录下;第三方套件go get后也需要放置在GOPATH/src的路径下才可以使用。
项目的Golang代码，和第三方的Golang文件混在一起, 项目文件管理麻烦
多个项目时设置多个gopath，不同的GoPath都需要下载依赖，那么磁盘中重复的依赖就会非常多，会占用大量的磁盘空间
2、GOMODULE 使用gomodule管理第三方依赖,将第三方库储存在本地的空间，给项目代码引用
通过GO111MODULE控制：
on/不会去GOPATH目录下查找依赖 auto/根据当前目录来决定是否启用modules功能 off go.mod记录依赖包，go.sum保证依赖版本不被篡改
3、基本命令 go.mod Go 命令行工具会自动处理 go.mod 中指定的模块版本。当源代码中 import 指向的模块不存在于 go.mod 文件中时，Go 命令行工具会自动搜索这个模块，并将最新版本（最后一个 tag 且非预发布的稳定版本）添加到 go.mod 文件中。
go.sum https://eddycjy.com/posts/go/go-moduels/2019-09-29-goproxy-cn/
详细罗列了当前项目直接或间接依赖的所有模块版本，并写明了模块版本的 SHA-256 哈希值以备 Go 在今后的操作中保证项目所依赖的那些模块版本不会被篡改。
# Go modules 打包整个模块包文件 zip 后再进行 hash 值 icode.</description></item></channel></rss>